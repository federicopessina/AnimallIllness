dataset = file.choose() # return path string
dataset = read.csv2(dataset, header = TRUE, sep = ";")
names(dataset)
summary(as.data.frame(dataset))
# data preparation
library(tydiverse)
install.packages("tidyverse")
# data preparation
library(tydiverse)
# data preparation
library(tidyverse)
summary(as.data.frame(dataset))
library(xgboost)
summary(as.data.frame(dataset))
View(dataset)
View(dataset)
View(dataset)
View(dataset)
dataset = read.csv2(dataset, header = TRUE, sep = ",")
dataset = file.choose() # return path string
dataset = read.csv2(dataset, header = TRUE, sep = ",")
names(dataset)
summary(as.data.frame(dataset))
View(dataset)
## remove not informative fields
dataset <- dataset %>%
select(-Id) %>% # id is not useful
select(-c(longitude, latitude)) %>% # reduntant information
select_if(is.numeric) # select remaining numeric columns
View(dataset)
View(dataset)
## relations between animal-fields
require(GGally)
## relations between animal-fields
library(GGally)
install.packages("GGally")
## relations between animal-fields
library(GGally)
dataset %>%
GGally::ggscatmat(columns = 1:5 ,color = "season", corMethod = "spearman") +
ggsci::scale_color_jco()+
ggpubr::theme_pubclean()+
theme(strip.background = element_rect(fill = "grey90"),
axis.text = element_text(size = 8),
legend.position = "right",
legend.key = element_blank())
## relations between animal-fields
plot(freeny, col="navy", main="Matrix Scatterplot")
## relations between animal-fields
plot(dataset, col="navy", main="Matrix Scatterplot")
## relations between animal-fields
pairs(dataset[,1:5], pch = 19, lower.panel = NULL)
na.action = na.omit
## relations between animal-fields
pairs(dataset[,1:5], pch = 19,
## relations between animal-fields
pairs(dataset[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between animal-fields
my_cols <- c("#00AFBB", "#E7B800")
## relations between animal-fields
my_cols <- c("#00AFBB", "#E7B800")
## relations between animal-fields
my_cols <- c("#00AFBB", "#E7B800")
pairs(dataset[,1:5], pch = 19,
col = my_cols,
lower.panel = NULL,
na.action = na.omit)
## relations between animal-fields
my_cols <- c("#FC4E07", "#00AFBB")
pairs(dataset[,1:5], pch = 19,
col = my_cols,
lower.panel = NULL,
na.action = na.omit)
## relations between animal-fields
pairs(dataset[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
pairs(dataset[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## remove fields related to humans
dataset_humanremoved = dataset %>% select(-starts_with("human"))
disease_labels <- disease_info %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
disease_labels <- dataset %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
head(diseaseLabels)           # target variable
head(disease_labels)           # target variable
str(dataset)
str(dataset_humanremoved)
head(dataset_humanremoved$country)
head(dataset$country)
dataset = file.choose() # return path string
dataset = read.csv2(dataset, header = TRUE, sep = ",")
dataset = file.choose() # return path string
dataset = file.choose() # return path string
dataset_path = file.choose() # return path string
dataset = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset)
summary(as.data.frame(dataset))
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset_raw)
summary(as.data.frame(dataset_raw))
## remove not informative fields
dataset_clean <- dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude)) %>% # reduntant information
dataset_clean
## remove not informative fields
dataset_clean <- dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude)) %>% # reduntant information
select_if(is.numeric) # select remaining numeric columns
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude)) %>% # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
disease_labels <- dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
disease_labels <- dataset_humanremoved %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
disease_labels <- dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
View(disease_labels)
View(disease_labels)
#head(disease_labels)           # target variable
head(dataset$country)
#head(disease_labels)           # target variable
head(dataset_clean$country)
model.matrix(~country-1, head(dataset_clean)) # one-hot matrix for just the first few rows of the "country" column
region <- model.matrix(~country-1, dataset_clean)
head(dataset_clean$speciesDescription) # print example
dataset_numeric$is_domestic <- str_detect(dataset_clean$speciesDescription, "domestic")
head(dataset_numeric$is_domestic)       # print example
species_list <- dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
list_species = tibble(species = list_species) # convert to df
species_list = tibble(species = species_list) # convert to df
options(na.action='na.pass')            # maintain NAs
species = model.matrix(~species-1, species_list)
dataset_numeric <- cbind(dataset_numeric, region, species)
diseaseInfo_matrix <- data.matrix(diseaseInfo_numeric)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
## train-test split 70-30
training_lenght <- round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
### test
test_data <- dataset_numeric_matrix[-(1:training_lenght),]
test_labels <- disease_labels[-(1:training_lenght)]
# logistic regression
library(xgboost)
data_train <- xgb.DMatrix(data = train_data, label = train_labels)
data_test <- xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(0000)
## model
set.seed(9876)
dataset_clean <- dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,             # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
prediction = predict(model, data_test)
error = mean(as.numeric(prediction > 0.5) != test_labels)
print(paste("test-error = ", err))
print(paste("test-error = ", error))
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
# logistic regression
library(xgboost)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
View(dataset_humanremoved)
dataset_path = file.choose() # return path string
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset_raw)
summary(as.data.frame(dataset_raw))
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
# logistic regression
library(xgboost)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
View(dataset_humanremoved)
disease_labels = dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
head(dataset_clean$country)
model.matrix(~country-1, head(dataset_clean))
region = model.matrix(~country-1, dataset_clean)
head(dataset_clean$speciesDescription)  # print example
dataset_numeric$is_domestic = str_detect(dataset_clean$speciesDescription, "domestic")
head(dataset_numeric$is_domestic)       # print example
species_list = dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
species_list = tibble(species = species_list) # convert to df
options(na.action='na.pass')            # maintain NAs
species = model.matrix(~species-1, species_list)
dataset_numeric <- cbind(dataset_numeric, region, species)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
prediction = predict(model, data_test)
error = mean(as.numeric(prediction > 0.5) != test_labels)
print(paste("test-error = ", error))
# data preparation
library(tidyverse)
library(xgboost)
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
## model
set.seed(9876)
logistic_data = dataset_raw[sample(1:nrow(dataset_raw))]
logistic_data = dataset_raw[sample(1:nrow(dataset_raw)),]
head(logistic_data)
View(logistic_data)
logistic_data = dataset_clean
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
logistic_data = dataset_clean
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
logistic_data = dataset_numeric
str(logistic_data)
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
logistic_data = dataset_humanremoved
str(logistic_data)
head(dataset_clean$country)
unique(dataset_clean$country)
count(unique(dataset_clean$country))
disease_labels = dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
head(dataset_clean$country)
head(disease_labels)                # target variable
head(dataset_clean$humansAffected)  # of the original column
head(disease_labels)                # target variable
head(dataset_clean$country)
region = model.matrix(~country-1, dataset_clean) # convert factors into one-hot encoded variables
head(region)
head(dataset_clean$speciesDescription)  # print example
dataset_numeric$is_domestic = str_detect(dataset_clean$speciesDescription, "domestic") # retrieve just domestic species
head(dataset_numeric$is_domestic)       # print example
### generate species list
species_list = dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
species_list = tibble(species = species_list) # convert to df
head(species_list) # print example
options(na.action='na.pass')                  # maintain NAs
species = model.matrix(~species-1, species_list)
head(species)
### add our one-hot encoded variable and convert the dataframe into a matrix
dataset_numeric <- cbind(dataset_numeric, region, species)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
head(dataset_numeric_matrix) # print example
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
View(train_data)
View(train_data)
View(train_data)
View(train_data)
View(test_data)
View(test_data)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
