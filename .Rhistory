select(-c(longitude, latitude)) %>% # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
disease_labels <- dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
disease_labels <- dataset_humanremoved %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
disease_labels <- dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
View(disease_labels)
View(disease_labels)
#head(disease_labels)           # target variable
head(dataset$country)
#head(disease_labels)           # target variable
head(dataset_clean$country)
model.matrix(~country-1, head(dataset_clean)) # one-hot matrix for just the first few rows of the "country" column
region <- model.matrix(~country-1, dataset_clean)
head(dataset_clean$speciesDescription) # print example
dataset_numeric$is_domestic <- str_detect(dataset_clean$speciesDescription, "domestic")
head(dataset_numeric$is_domestic)       # print example
species_list <- dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
list_species = tibble(species = list_species) # convert to df
species_list = tibble(species = species_list) # convert to df
options(na.action='na.pass')            # maintain NAs
species = model.matrix(~species-1, species_list)
dataset_numeric <- cbind(dataset_numeric, region, species)
diseaseInfo_matrix <- data.matrix(diseaseInfo_numeric)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
## train-test split 70-30
training_lenght <- round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
### test
test_data <- dataset_numeric_matrix[-(1:training_lenght),]
test_labels <- disease_labels[-(1:training_lenght)]
# logistic regression
library(xgboost)
data_train <- xgb.DMatrix(data = train_data, label = train_labels)
data_test <- xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(0000)
## model
set.seed(9876)
dataset_clean <- dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,             # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
prediction = predict(model, data_test)
error = mean(as.numeric(prediction > 0.5) != test_labels)
print(paste("test-error = ", err))
print(paste("test-error = ", error))
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
# logistic regression
library(xgboost)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
View(dataset_humanremoved)
dataset_path = file.choose() # return path string
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset_raw)
summary(as.data.frame(dataset_raw))
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
# logistic regression
library(xgboost)
## remove fields related to humans
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
View(dataset_humanremoved)
disease_labels = dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
head(dataset_clean$country)
model.matrix(~country-1, head(dataset_clean))
region = model.matrix(~country-1, dataset_clean)
head(dataset_clean$speciesDescription)  # print example
dataset_numeric$is_domestic = str_detect(dataset_clean$speciesDescription, "domestic")
head(dataset_numeric$is_domestic)       # print example
species_list = dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
species_list = tibble(species = species_list) # convert to df
options(na.action='na.pass')            # maintain NAs
species = model.matrix(~species-1, species_list)
dataset_numeric <- cbind(dataset_numeric, region, species)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
prediction = predict(model, data_test)
error = mean(as.numeric(prediction > 0.5) != test_labels)
print(paste("test-error = ", error))
# data preparation
library(tidyverse)
library(xgboost)
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
## model
set.seed(9876)
logistic_data = dataset_raw[sample(1:nrow(dataset_raw))]
logistic_data = dataset_raw[sample(1:nrow(dataset_raw)),]
head(logistic_data)
View(logistic_data)
logistic_data = dataset_clean
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # reduntant information
logistic_data = dataset_clean
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
logistic_data = dataset_numeric
str(logistic_data)
dataset_humanremoved = dataset_numeric %>% select(-starts_with("human"))
logistic_data = dataset_humanremoved
str(logistic_data)
head(dataset_clean$country)
unique(dataset_clean$country)
count(unique(dataset_clean$country))
disease_labels = dataset_numeric %>%
select(humansAffected) %>%  # columns with the humans affected
is.na() %>%                 # check if NA value
magrittr::not()             # switch  boolean values
head(dataset_clean$country)
head(disease_labels)                # target variable
head(dataset_clean$humansAffected)  # of the original column
head(disease_labels)                # target variable
head(dataset_clean$country)
region = model.matrix(~country-1, dataset_clean) # convert factors into one-hot encoded variables
head(region)
head(dataset_clean$speciesDescription)  # print example
dataset_numeric$is_domestic = str_detect(dataset_clean$speciesDescription, "domestic") # retrieve just domestic species
head(dataset_numeric$is_domestic)       # print example
### generate species list
species_list = dataset_clean$speciesDescription %>%
str_replace("[[:punct:]]", "") %>%    # remove punctuation
str_extract("[a-z]*$")                # extract the last word
species_list = tibble(species = species_list) # convert to df
head(species_list) # print example
options(na.action='na.pass')                  # maintain NAs
species = model.matrix(~species-1, species_list)
head(species)
### add our one-hot encoded variable and convert the dataframe into a matrix
dataset_numeric <- cbind(dataset_numeric, region, species)
dataset_numeric_matrix <- data.matrix(dataset_numeric)
head(dataset_numeric_matrix) # print example
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
View(train_data)
View(train_data)
View(train_data)
View(train_data)
View(test_data)
View(test_data)
## train-test split 70-30
training_lenght = round(length(disease_labels) * .70)
### training
train_data = dataset_numeric_matrix[1:training_lenght,]
train_labels = disease_labels[1:training_lenght]
### test
test_data = dataset_numeric_matrix[-(1:training_lenght),]
test_labels = disease_labels[-(1:training_lenght)]
data_train = xgb.DMatrix(data = train_data, label = train_labels)
data_test = xgb.DMatrix(data = test_data, label = test_labels)
## model
set.seed(9876)
dataset_clean = dataset_clean[sample(1:nrow(dataset_clean)),]
model = xgboost(data = data_train,              # the data
nround = 2,                    # maximum recursion
objective = "binary:logistic") # objective func
# data preparation
library(tidyverse)
library(xgboost)
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset_raw)
summary(as.data.frame(dataset_raw))
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # redundant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
install.packages("ggbiplot")
devtools::install_github("vqv/ggbiplot")
library(devtools)
install.packages("devtools")
devtools::install_github("vqv/ggbiplot")
devtools::install_github("vqv/ggbiplot")
library(tidyverse)
## calculate principal components
results = prcomp(dataset_numeric, scale = TRUE)
View(dataset_numeric)
## remove not informative fields
dataset_pca = dataset_raw %>%
select(-c(longitude, latitude))     # redundant information
View(dataset_pca)
## calculate principal components
results = prcomp(x = dataset_numeric, # data frame for pca
na.action(na.omit()),
scale = TRUE)
#reverse the signs
results$rotation = -1*results$rotation
View(dataset_pca)
dataset_pca = dataset_pca %>%
select_if(is.numeric)
View(dataset_pca)
## calculate principal components
results = prcomp(x = dataset_numeric, # data frame for pca
na.action(na.omit()),
scale = TRUE,        # to have mean = 0 and SD = 1 before calculating
)
View(dataset_pca)
## calculate principal components
results = prcomp(x = dataset_numeric, # data frame for pca
na.action = na.omit,
scale = TRUE,        # to have mean = 0 and SD = 1 before calculating
)
## calculate principal components
results = prcomp(x = na.omit(dataset_numeric), # data frame for pca
scale = TRUE,        # to have mean = 0 and SD = 1 before calculating
)
## calculate principal components
results = prcomp(x = na.omit(dataset_numeric), # data frame for pca
scale = FALSE,        # to have mean = 0 and SD = 1 before calculating
)
View(dataset_pca)
dataset_pca = dataset_pca %>% select(-starts_with("human"))
## calculate principal components
results = prcomp(x = na.omit(dataset_numeric), # data frame for pca
scale = FALSE,        # to have mean = 0 and SD = 1 before calculating
)
View(dataset_pca)
## calculate principal components
results = prcomp(x = na.omit(dataset_pca), # data frame for pca
scale = FALSE,        # to have mean = 0 and SD = 1 before calculating
)
View(results)
View(results)
#reverse the signs
results$rotation = -1*results$rotation
results$rotation
## remove not informative fields
dataset_pca = dataset_raw %>%
select(-Id) %>%
select(-c(longitude, latitude))     # redundant information
dataset_pca = dataset_pca %>%
select_if(is.numeric)
dataset_pca = dataset_pca %>% select(-starts_with("human"))
## calculate principal components
results = prcomp(x = na.omit(dataset_pca), # data frame for pca
scale = FALSE,        # to have mean = 0 and SD = 1 before calculating
)
#reverse the signs
results$rotation = -1*results$rotation
results$rotation
biplot(results, scale = 0)
## remove not informative fields
dataset_pca = dataset_raw %>%
select(-Id) %>%
select(-c(longitude, latitude))     # redundant information
dataset_pca = dataset_pca %>%
select_if(is.numeric)
dataset_pca = dataset_pca %>% select(-starts_with("human"))
## calculate principal components
results = prcomp(x = na.omit(dataset_pca), # data frame for pca
scale = TRUE,        # to have mean = 0 and SD = 1 before calculating
)
#reverse the signs
results$rotation = -1*results$rotation
results$rotation
biplot(results, scale = 0)
biplot
biplot(results, scale = 1)
results$sdev^2 / sum(results$sdev^2)
#calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
## create scree plot
qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
## create scree plot
qplot(c(1:5), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
View(dataset_pca)
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## remove not informative fields
dataset_pca = dataset_raw %>%
select(-Id) %>%
select(-c(longitude, latitude))     # redundant information
dataset_pca = dataset_pca %>%
select_if(is.numeric)
dataset_pca = dataset_pca %>% select(-starts_with("human"))
## calculate principal components
results = prcomp(x = na.omit(dataset_pca), # data frame for pca
scale = TRUE,             # to have mean = 0 and SD = 1 before calculating
)
## reverse the signs
results$rotation = -1*results$rotation
results$rotation
biplot(results, scale = 1)                 # plot biplot of pca
results$sdev^2 / sum(results$sdev^2)       #calculate total variance explained by each principal component
var_explained = results$sdev^2 / sum(results$sdev^2)
## create scree plot
qplot(c(1:5), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
library(ggplot2)
library(devtools)
install_github("vqv/ggbiplot")
require(ggbiplot)
ggbiplot(results)
summary(results)
library(ggplot2)
bpot = ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1,
labels = row.names(dataset_pca),
varname.size = 5,
varname.abbrev = FALSE,
var.axes = TRUE,
circle = TRUE,
ellipse = TRUE)
bpot = ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1
bpot = ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1)
ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1),
labels = row.n
ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1)
ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1),
labels = row.names(dataset_pca)
ggbiplot(pcobj = results,
choices = c(1,2),
obs.scale = 1,
var.scale = 1),
labels = row.names(dataset_pca)
## create scree plot
qplot(c(1:5), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
biplot(results, scale = 1)                 # plot biplot of pca
# data preparation
library(tidyverse)
library(xgboost)
dataset_path = file.choose() # return path string
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
dataset_raw = read.csv2(dataset_path, header = TRUE, sep = ",")
names(dataset_raw)
summary(as.data.frame(dataset_raw))
## remove not informative fields
dataset_clean = dataset_raw %>%
select(-Id) %>%                     # id is not useful
select(-c(longitude, latitude))     # redundant information
# retrieve just numeric fields
dataset_numeric = dataset_clean %>%
select_if(is.numeric)               # select remaining numeric columns
## relations between animal-fields
pairs(dataset_numeric[,1:5], pch = 19,
lower.panel = NULL,
na.action = na.omit)
## relations between human-fields
pairs(dataset_numeric[,6:8], pch = 19,
lower.panel = NULL,
na.action = na.omit)
linear_model.sumAtRisksumSlaughtered <- lm(dataset_numeric$sumAtRisk ~ dataset_numeric$sumSlaughtered, data = dataset_numeric)
linear_model.sumAtRisksumSlaughtered
summary(linear_model.sumAtRisksumSlaughtered)
linear_model.sumDestroyedsumCases <- lm(dataset_numeric$sumDestroyed ~ dataset_numeric$sumCases, data = dataset_numeric)
summary(linear_model.sumDestroyedsumCases)
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ dataset_numeric$sumDestroyed, data = dataset_numeric)
summary(linear_model.sumAtRisksumSlaughtered)
na.action = na.omit
na.action = na.omit
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ dataset_numeric$sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ dataset_numeric$sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
summary(linear_model.sumAtRisksumDestroyed)
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ a + dataset_numeric$sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ dataset_numeric$sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
summary(linear_model.sumAtRisksumDestroyed)
linear_model.sumAtRisksumDestroyed <- lm(formula = dataset_numeric$sumAtRisk ~ dataset_numeric$sumDestroyed,
na.action = na.omit)
summary(linear_model.sumAtRisksumDestroyed)
linear_model.sumAtRisksumDestroyed <- lm(formula = sumAtRisk ~ sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
summary(linear_model.sumAtRisksumDestroyed)
linear_model.sumAtRisksumDestroyed <- lm(formula = sumAtRisk ~ sumDestroyed,
data = dataset_numeric,
na.action = na.omit)
summary(linear_model.sumAtRisksumDestroyed)
